include_directories("${OVS_Port_SOURCE_DIR}")
include_directories("${OVS_Port_SOURCE_DIR}/include")
include_directories("${OVS_Port_SOURCE_DIR}/lib")
include_directories("${OVS_Port_SOURCE_DIR}/ofproto")
include_directories("${OVS_Port_SOURCE_DIR}/ovsdb")
include_directories("${OVS_Port_SOURCE_DIR}/utilities")
include_directories("${OVS_Port_SOURCE_DIR}/tests")
link_directories("${OVS_Port_SOURCE_DIR}")
link_directories("${OVS_Port_SOURCE_DIR}/include")
link_directories("${OVS_Port_SOURCE_DIR}/lib")
link_directories("${OVS_Port_SOURCE_DIR}/ovsdb")
link_directories("${OVS_Port_SOURCE_DIR}/utilities")
link_directories("${OVS_Port_SOURCE_DIR}/tests")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
link_directories("$ENV{PATH}")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
include_directories("${OVS_Port_SOURCE_DIR}/windows")
link_directories("${OVS_Port_SOURCE_DIR}/windows")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
set(CMAKE_EXE_FLAGS "${CMAKE_EXE_FLAGS} -Wstrict-prototypes -Wall -Wno-sign-compare -Wpointer-arith -Wdeclaration-after-statement -Wformat-security -Wswitch-enum -Wunused-parameter -Wstrict-aliasing -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-field-initializers -Wno-override-init -g ")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

add_executable(test-aes128 test-aes128.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-aes128 openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-aes128 openvswitch win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-bundle test-bundle.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-bundle openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-bundle openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-classifier test-classifier.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-classifier openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-classifier openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-csum test-csum.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-csum openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-csum openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-file_name test-file_name.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-file_name openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-file_name openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-flows test-flows.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-flows openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-flows openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

	add_executable(test-hash test-hash.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-hash openvswitch rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-hash openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-heap test-heap.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-heap openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-heap openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-hmap test-hmap.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-hmap openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-hmap openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-json test-json.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-json openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-json openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-jsonrpc test-jsonrpc.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-jsonrpc openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-jsonrpc openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-list test-list.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-list openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-list openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-lockfile test-lockfile.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-lockfile openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-lockfile openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-multipath test-multipath.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-multipath openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-multipath openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-packets test-packets.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-packets openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-packets openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-random test-random.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-random openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-random openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-stp test-stp.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-stp openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-stp openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-netflow test-netflow.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-netflow openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-netflow openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-unix-socket test-unix-socket.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-unix-socket openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-unix-socket openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-odp test-odp.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-odp openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-odp openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-ovsdb test-ovsdb.c idltest.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-ovsdb ovsdb openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-ovsdb openvswitch ovsdb win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-reconnect test-reconnect.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-reconnect openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-reconnect openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-sha1 test-sha1.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-sha1 openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-sha1 openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

#add_executable(test-timeval test-timeval.c) 
#	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
#	target_link_libraries(test-timeval openvswitch ssl crypto dl z rt m)
#	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
#	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
#	target_link_libraries(test-timeval openvswitch  win_api )#ssl crypto dl z rt m)
#	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-strtok_r test-strtok_r.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-strtok_r rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-strtok_r openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-type-props test-type-props.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-type-props rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-type-props openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-util test-util.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-util openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-util openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-uuid test-uuid.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-uuid openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-uuid openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-vconn test-vconn.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-vconn openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-vconn openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable(test-byte-order test-byte-order.c) 
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(test-byte-order openvswitch rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(test-byte-order openvswitch  win_api )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")



